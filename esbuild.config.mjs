// // Orignally taken from https://github.com/kelszo/obsidian-file-explorer-plus/blob/8584a785559fdef9f24521ec6725028e109b764d/esbuild.config.mjs

import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import path from "path";
import fs from "fs";

import { sassPlugin } from "esbuild-sass-plugin";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isDirectory = (path) => fs.existsSync(vaultPath) && fs.lstatSync(vaultPath).isDirectory();

const prod = process.argv[2] === "production";

let mainJsPath = "main.js";
let stylesCssPath = "styles.css";

const vaultPath = process.argv[3];

if (isDirectory(vaultPath)) {
  const pluginsDir = path.join(vaultPath, ".obsidian", "plugins");

  if (isDirectory(pluginsDir)) {
    const scopeToThisDir = path.join(pluginsDir, "obsidian-scope-to-this");
    mainJsPath = path.join(scopeToThisDir, "main.js");
    stylesCssPath = path.join(scopeToThisDir, "styles.css");
    const hotreloadFilePath = path.join(scopeToThisDir, ".hotreload");

    fs.closeSync(fs.openSync(hotreloadFilePath, "w"));

    console.log(`Saving to ${scopeToThisDir}`);
  }
}

let jsContext = esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: mainJsPath,
});

let scssContext = esbuild.context({
  entryPoints: ["src/main.scss"],
  outfile: stylesCssPath,
  plugins: [sassPlugin()],
});

[jsContext, scssContext] = await Promise.all([jsContext, scssContext]);

if (prod) {
  await Promise.all([jsContext.rebuild(), scssContext.rebuild()]);
  process.exit(0);
} else {
  await Promise.all([jsContext.watch(), scssContext.watch()]);
}